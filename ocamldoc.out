\documentclass[11pt]{article} 
\usepackage[latin1]{inputenc} 
\usepackage[T1]{fontenc} 
\usepackage{textcomp}
\usepackage{fullpage} 
\usepackage{url} 
\usepackage{ocamldoc}
\begin{document}
\tableofcontents
\section{Module {\tt{Interpretation}} : Fonction déterminant si pattern\_contenu est contenu dans pattern\_conteneur}
\label{module:Interpretation}\index{Interpretation@\verb`Interpretation`}


{\bf Returns }booléen qui détermine si le pattern est contenu dans le pattern
*



\ocamldocvspace{0.5cm}



\label{type:Interpretation.value}\begin{ocamldoccode}
type value =
  | Val_unit
  | Val_bool of bool
  | Val_int of int
  | Val_float of float
  | Val_str of string
  | Val_fun of Ast.p_patt * Ast.p_expr
  | Val_lst of value list
  | Val_tuple of value list
\end{ocamldoccode}
\index{value@\verb`value`}




\begin{ocamldoccode}
{\tt{module }}{\tt{Str\_map}}{\tt{ : }}\end{ocamldoccode}
\label{module:Interpretation.Str-underscoremap}\index{Str-underscoremap@\verb`Str_map`}

{\tt{Map.Make}}{\tt{(}}{\tt{String}}{\tt{)}}





\label{type:Interpretation.environnement}\begin{ocamldoccode}
type environnement = value Str_map.t 
\end{ocamldoccode}
\index{environnement@\verb`environnement`}




\label{val:Interpretation.contains}\begin{ocamldoccode}
val contains : Ast.p_patt -> Ast.p_patt -> bool
\end{ocamldoccode}
\index{contains@\verb`contains`}
\begin{ocamldocdescription}
Fonction déterminant si pattern\_contenu est contenu dans pattern\_conteneur

{\bf Returns }booléen qui détermine si le pattern est contenu dans le pattern
*


\end{ocamldocdescription}




\label{val:Interpretation.contains-underscorepdesc}\begin{ocamldoccode}
val contains_pdesc : Ast.p_patt_desc -> Ast.p_patt -> bool
\end{ocamldoccode}
\index{contains-underscorepdesc@\verb`contains_pdesc`}




\label{val:Interpretation.substitution}\begin{ocamldoccode}
val substitution : Ast.p_expr -> Ast.p_patt -> Ast.p_expr_desc -> Ast.p_expr
\end{ocamldoccode}
\index{substitution@\verb`substitution`}
\begin{ocamldocdescription}
Renvoie une nouvelle expression, dans laquelle on a substitué element\_a\_remplacer par element\_remplacant, dans l'expression pexp


*


\end{ocamldocdescription}




\label{val:Interpretation.subs-underscorepexprdesc}\begin{ocamldoccode}
val subs_pexprdesc :
  Ast.p_expr_desc -> Ast.p_patt -> Ast.p_expr_desc -> Ast.p_expr_desc
\end{ocamldoccode}
\index{subs-underscorepexprdesc@\verb`subs_pexprdesc`}




\label{val:Interpretation.gas}\begin{ocamldoccode}
val gas :
  Ast.p_patt ->
  Ast.p_expr ->
  (Ast.ident * Ast.p_expr_desc) list -> (Ast.ident * Ast.p_expr_desc) list
\end{ocamldoccode}
\index{gas@\verb`gas`}
\begin{ocamldocdescription}
Renvoie la liste des paires (identificateur, expression) associée à un pattern + une expression
*


\end{ocamldocdescription}




\label{val:Interpretation.gas-underscoredesc}\begin{ocamldoccode}
val gas_desc :
  Ast.p_patt_desc ->
  Ast.p_expr ->
  (Ast.ident * Ast.p_expr_desc) list -> (Ast.ident * Ast.p_expr_desc) list
\end{ocamldoccode}
\index{gas-underscoredesc@\verb`gas_desc`}




\label{val:Interpretation.application-underscoresubst}\begin{ocamldoccode}
val application_subst : Ast.p_expr -> Ast.p_patt -> Ast.p_expr -> Ast.p_expr
\end{ocamldoccode}
\index{application-underscoresubst@\verb`application_subst`}
\begin{ocamldocdescription}
Applique une substitution, et ce sans restriction sur le pattern
*


\end{ocamldocdescription}




\label{val:Interpretation.valuation-underscorecte}\begin{ocamldoccode}
val valuation_cte : Ast.constant -> value
\end{ocamldoccode}
\index{valuation-underscorecte@\verb`valuation_cte`}
\begin{ocamldocdescription}
Évalue la valeur d'une constante *


\end{ocamldocdescription}




\label{val:Interpretation.apply-underscoreunop}\begin{ocamldoccode}
val apply_unop : Ast.unop -> value -> value
\end{ocamldoccode}
\index{apply-underscoreunop@\verb`apply_unop`}
\begin{ocamldocdescription}
Evalue un opérateur unaire *


\end{ocamldocdescription}




\label{val:Interpretation.apply-underscorebinop}\begin{ocamldoccode}
val apply_binop : Ast.binop ->
  value -> value -> value
\end{ocamldoccode}
\index{apply-underscorebinop@\verb`apply_binop`}
\begin{ocamldocdescription}
Evalue une expression composée d'un opérateur binaire *


\end{ocamldocdescription}




\label{val:Interpretation.application-underscorefun}\begin{ocamldoccode}
val application_fun : Ast.p_patt -> Ast.p_expr -> Ast.p_expr -> Ast.p_expr
\end{ocamldoccode}
\index{application-underscorefun@\verb`application_fun`}
\begin{ocamldocdescription}
Applique une fonction 
    fun pattern$\rightarrow$expr\_fun à une valeur value\_exp *


\end{ocamldocdescription}




\label{val:Interpretation.interpretation}\begin{ocamldoccode}
val interpretation : Ast.p_expr ->
  value Str_map.t -> value
\end{ocamldoccode}
\index{interpretation@\verb`interpretation`}
\begin{ocamldocdescription}
Interprète une expression en paramètre, en fonction de l'environnement passé en paramètre 
*


\end{ocamldocdescription}




\label{val:Interpretation.pdef-underscoreinterp}\begin{ocamldoccode}
val pdef_interp : Ast.p_def -> value
\end{ocamldoccode}
\index{pdef-underscoreinterp@\verb`pdef_interp`}




\label{val:Interpretation.plets-underscoreinterp}\begin{ocamldoccode}
val plets_interp : Ast.p_def list -> value list
\end{ocamldoccode}
\index{plets-underscoreinterp@\verb`plets_interp`}




\label{val:Interpretation.str-underscorepattern}\begin{ocamldoccode}
val str_pattern : Ast.p_patt -> Ast.ident
\end{ocamldoccode}
\index{str-underscorepattern@\verb`str_pattern`}




\label{val:Interpretation.str-underscoreof-underscorebinop}\begin{ocamldoccode}
val str_of_binop : {\textquotesingle}a -> string
\end{ocamldoccode}
\index{str-underscoreof-underscorebinop@\verb`str_of_binop`}
\begin{ocamldocdescription}
Affiche un opérateur binaire sous forme de String 
fixme
*


\end{ocamldocdescription}




\label{val:Interpretation.str-underscoreexpr}\begin{ocamldoccode}
val str_expr : Ast.p_expr -> Ast.ident
\end{ocamldoccode}
\index{str-underscoreexpr@\verb`str_expr`}
\begin{ocamldocdescription}
Affiche une expression sous forme de Strign *


\end{ocamldocdescription}




\label{val:Interpretation.str-underscorevalue}\begin{ocamldoccode}
val str_value : value -> string
\end{ocamldoccode}
\index{str-underscorevalue@\verb`str_value`}
\begin{ocamldocdescription}
rend la valeur sous forme de chaîne *


\end{ocamldocdescription}


\end{document}