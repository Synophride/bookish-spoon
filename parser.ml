type token =
  | AND
  | BAR
  | COLONCOLON
  | COMMA
  | COMP of (Ast.binop)
  | CONST_BOOL of (bool)
  | CONST_INT of (int)
  | CONST_FLOAT of (float)
  | CONST_STRING of (string)
  | ELSE
  | EOF
  | EQUAL
  | FUNCTION
  | IDENT of (string)
  | IF
  | IN
  | LBRACKET
  | LET
  | LPAREN
  | MATCH
  | MINUS
  | MINUS_DOT
  | MINUS_GT
  | NEQ
  | NOT
  | OR
  | PLUS
  | PLUS_DOT
  | RBRACKET
  | REC
  | RPAREN
  | SEMI
  | SLASH
  | SLASH_DOT
  | STAR
  | STAR_DOT
  | THEN
  | UNDERSCORE
  | WITH

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

  open Ast

  let loc () = symbol_start_pos (), symbol_end_pos ()
  let mk_expr e = { pexpr_desc = e; pexpr_loc = loc () }
  let mk_patt p = { ppatt_desc = p; ppatt_loc = loc () }
  let mk_def d = { pdef_desc = d; pdef_loc = loc () }

# 54 "parser.ml"
let yytransl_const = [|
  257 (* AND *);
  258 (* BAR *);
  259 (* COLONCOLON *);
  260 (* COMMA *);
  266 (* ELSE *);
    0 (* EOF *);
  267 (* EQUAL *);
  268 (* FUNCTION *);
  270 (* IF *);
  271 (* IN *);
  272 (* LBRACKET *);
  273 (* LET *);
  274 (* LPAREN *);
  275 (* MATCH *);
  276 (* MINUS *);
  277 (* MINUS_DOT *);
  278 (* MINUS_GT *);
  279 (* NEQ *);
  280 (* NOT *);
  281 (* OR *);
  282 (* PLUS *);
  283 (* PLUS_DOT *);
  284 (* RBRACKET *);
  285 (* REC *);
  286 (* RPAREN *);
  287 (* SEMI *);
  288 (* SLASH *);
  289 (* SLASH_DOT *);
  290 (* STAR *);
  291 (* STAR_DOT *);
  292 (* THEN *);
  293 (* UNDERSCORE *);
  294 (* WITH *);
    0|]

let yytransl_block = [|
  261 (* COMP *);
  262 (* CONST_BOOL *);
  263 (* CONST_INT *);
  264 (* CONST_FLOAT *);
  265 (* CONST_STRING *);
  269 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\004\000\004\000\006\000\006\000\
\006\000\010\000\010\000\010\000\010\000\010\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\011\000\011\000\011\000\
\011\000\011\000\005\000\005\000\015\000\015\000\014\000\014\000\
\012\000\012\000\013\000\013\000\013\000\009\000\009\000\008\000\
\008\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\004\000\005\000\001\000\001\000\
\003\000\003\000\001\000\001\000\003\000\003\000\001\000\002\000\
\003\000\004\000\004\000\006\000\014\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\002\000\002\000\001\000\001\000\
\001\000\001\000\000\000\001\000\000\000\001\000\002\000\001\000\
\003\000\003\000\000\000\001\000\003\000\003\000\003\000\002\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\058\000\000\000\000\000\044\000\004\000\
\000\000\001\000\003\000\000\000\000\000\007\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\056\000\000\000\000\000\
\009\000\039\000\040\000\041\000\042\000\000\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\054\000\000\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\035\000\036\000\
\037\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\000\000\000\000\000\000\014\000\000\000\000\000\010\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\029\000\026\000\027\000\
\047\000\000\000\000\000\053\000\000\000\000\000\049\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\008\000\009\000\017\000\048\000\018\000\
\020\000\041\000\042\000\053\000\049\000\073\000\105\000"

let yysindex = "\004\000\
\245\254\000\000\234\254\000\000\010\000\245\254\000\000\000\000\
\000\255\000\000\000\000\001\255\001\255\000\000\005\255\000\000\
\001\255\006\255\018\255\254\254\229\255\000\000\229\255\001\255\
\000\000\000\000\000\000\000\000\000\000\001\255\000\000\229\255\
\229\255\234\254\062\255\229\255\229\255\229\255\229\255\099\002\
\123\255\000\000\099\002\018\255\000\000\010\255\122\255\199\255\
\003\255\045\255\000\000\160\255\031\255\086\255\000\000\000\000\
\000\000\229\255\229\255\229\255\229\255\229\255\229\255\229\255\
\229\255\229\255\229\255\229\255\229\255\229\255\229\255\123\255\
\000\000\229\255\229\255\229\255\000\000\229\255\229\255\000\000\
\000\000\063\255\037\001\009\255\009\255\009\255\067\255\067\255\
\009\255\134\002\067\255\067\255\000\000\000\000\000\000\000\000\
\000\000\099\002\250\001\000\000\099\002\029\002\000\000\000\000\
\017\255\229\255\044\255\099\002\051\255\229\255\064\002\001\255\
\081\255\001\255\066\255\229\255\099\002"

let yyrindex = "\000\000\
\085\000\000\000\027\255\000\000\000\000\085\000\000\000\000\000\
\000\000\000\000\000\000\079\255\000\000\000\000\000\000\000\000\
\082\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\255\027\255\000\000\000\000\000\000\000\000\000\000\002\000\
\001\000\000\000\008\000\065\255\000\000\000\000\000\000\080\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\068\255\000\000\000\000\000\000\000\000\
\000\000\094\255\101\001\229\000\013\001\051\001\077\000\115\000\
\089\001\131\001\153\000\191\000\000\000\000\000\000\000\000\000\
\000\000\148\001\000\000\000\000\185\001\084\255\000\000\000\000\
\000\000\000\000\000\000\197\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\228\001"

let yygindex = "\000\000\
\000\000\110\000\000\000\083\000\000\000\247\255\244\255\105\000\
\102\000\218\255\000\000\049\000\058\000\063\000\000\000"

let yytablesize = 937
let yytable = "\015\000\
\015\000\005\000\072\000\019\000\001\000\003\000\007\000\006\000\
\040\000\010\000\043\000\059\000\012\000\016\000\044\000\021\000\
\023\000\013\000\013\000\047\000\046\000\024\000\052\000\054\000\
\055\000\056\000\057\000\025\000\062\000\063\000\077\000\074\000\
\107\000\072\000\066\000\067\000\014\000\014\000\048\000\043\000\
\068\000\069\000\070\000\071\000\043\000\083\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\078\000\081\000\098\000\099\000\043\000\
\104\000\101\000\102\000\026\000\027\000\028\000\029\000\109\000\
\110\000\030\000\031\000\032\000\024\000\033\000\034\000\035\000\
\036\000\037\000\038\000\114\000\002\000\039\000\058\000\116\000\
\059\000\008\000\060\000\051\000\057\000\108\000\055\000\051\000\
\061\000\111\000\068\000\069\000\070\000\071\000\113\000\117\000\
\115\000\062\000\063\000\052\000\064\000\045\000\065\000\066\000\
\067\000\050\000\025\000\011\000\050\000\068\000\069\000\070\000\
\071\000\022\000\058\000\082\000\059\000\045\000\060\000\103\000\
\026\000\027\000\028\000\029\000\061\000\100\000\097\000\031\000\
\000\000\000\000\033\000\000\000\035\000\062\000\063\000\000\000\
\064\000\000\000\065\000\066\000\067\000\000\000\000\000\000\000\
\022\000\068\000\069\000\070\000\071\000\075\000\000\000\000\000\
\058\000\000\000\059\000\079\000\060\000\000\000\000\000\000\000\
\000\000\000\000\061\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\062\000\063\000\000\000\064\000\000\000\
\065\000\066\000\067\000\000\000\000\000\080\000\023\000\068\000\
\069\000\070\000\071\000\000\000\000\000\000\000\000\000\058\000\
\000\000\059\000\000\000\060\000\000\000\000\000\000\000\000\000\
\000\000\061\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\063\000\000\000\064\000\000\000\065\000\
\066\000\067\000\000\000\000\000\017\000\076\000\068\000\069\000\
\070\000\071\000\026\000\027\000\028\000\029\000\000\000\000\000\
\030\000\031\000\032\000\000\000\033\000\034\000\035\000\036\000\
\037\000\038\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\015\000\015\000\015\000\015\000\015\000\000\000\000\000\
\000\000\000\000\015\000\015\000\030\000\000\000\000\000\015\000\
\005\000\015\000\005\000\000\000\015\000\015\000\006\000\015\000\
\006\000\015\000\015\000\015\000\015\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\000\000\015\000\048\000\
\048\000\048\000\048\000\048\000\000\000\000\000\000\000\000\000\
\048\000\048\000\031\000\000\000\000\000\048\000\000\000\048\000\
\000\000\000\000\048\000\048\000\000\000\048\000\000\000\048\000\
\048\000\048\000\048\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\048\000\024\000\024\000\024\000\
\024\000\024\000\000\000\000\000\000\000\000\000\024\000\024\000\
\032\000\000\000\000\000\024\000\000\000\024\000\000\000\000\000\
\024\000\024\000\000\000\024\000\033\000\024\000\024\000\024\000\
\024\000\000\000\024\000\024\000\000\000\000\000\000\000\000\000\
\024\000\000\000\024\000\025\000\025\000\025\000\025\000\025\000\
\000\000\000\000\000\000\000\000\025\000\025\000\000\000\000\000\
\000\000\025\000\034\000\025\000\000\000\000\000\025\000\025\000\
\000\000\025\000\000\000\025\000\025\000\025\000\025\000\000\000\
\025\000\025\000\000\000\019\000\000\000\000\000\025\000\000\000\
\025\000\022\000\022\000\022\000\022\000\022\000\000\000\000\000\
\000\000\000\000\022\000\022\000\000\000\000\000\000\000\022\000\
\000\000\022\000\000\000\000\000\022\000\022\000\000\000\022\000\
\000\000\022\000\022\000\022\000\022\000\000\000\022\000\022\000\
\018\000\000\000\000\000\000\000\022\000\000\000\022\000\023\000\
\023\000\023\000\023\000\023\000\020\000\000\000\000\000\000\000\
\023\000\023\000\000\000\000\000\000\000\023\000\000\000\023\000\
\000\000\000\000\023\000\023\000\000\000\023\000\000\000\023\000\
\023\000\023\000\023\000\000\000\023\000\023\000\000\000\000\000\
\000\000\000\000\023\000\021\000\023\000\017\000\017\000\000\000\
\017\000\017\000\000\000\000\000\000\000\000\000\017\000\017\000\
\000\000\000\000\000\000\017\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\017\000\000\000\000\000\
\017\000\000\000\017\000\017\000\000\000\000\000\000\000\000\000\
\017\000\000\000\017\000\000\000\000\000\030\000\030\000\000\000\
\030\000\030\000\000\000\000\000\000\000\000\000\030\000\030\000\
\000\000\000\000\000\000\030\000\000\000\030\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\030\000\000\000\059\000\
\030\000\060\000\030\000\030\000\000\000\000\000\000\000\061\000\
\030\000\000\000\030\000\031\000\031\000\000\000\031\000\031\000\
\062\000\063\000\000\000\064\000\031\000\031\000\066\000\067\000\
\000\000\031\000\000\000\031\000\068\000\069\000\070\000\071\000\
\000\000\031\000\000\000\031\000\000\000\000\000\031\000\000\000\
\031\000\031\000\000\000\000\000\000\000\000\000\031\000\000\000\
\031\000\032\000\032\000\000\000\032\000\032\000\000\000\000\000\
\000\000\000\000\032\000\032\000\000\000\033\000\033\000\032\000\
\033\000\032\000\000\000\000\000\000\000\000\000\033\000\032\000\
\000\000\032\000\000\000\033\000\032\000\033\000\032\000\032\000\
\000\000\000\000\000\000\000\000\032\000\033\000\032\000\000\000\
\033\000\000\000\033\000\033\000\034\000\000\000\034\000\000\000\
\033\000\000\000\033\000\000\000\034\000\000\000\000\000\000\000\
\000\000\034\000\000\000\034\000\000\000\019\000\000\000\019\000\
\000\000\000\000\000\000\034\000\000\000\019\000\034\000\000\000\
\034\000\034\000\019\000\000\000\019\000\000\000\034\000\000\000\
\034\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
\000\000\019\000\019\000\000\000\000\000\000\000\000\000\019\000\
\000\000\019\000\018\000\000\000\018\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\020\000\018\000\
\020\000\018\000\000\000\000\000\000\000\000\000\020\000\000\000\
\000\000\000\000\000\000\020\000\018\000\020\000\018\000\018\000\
\000\000\000\000\000\000\000\000\018\000\000\000\018\000\000\000\
\020\000\000\000\020\000\020\000\000\000\021\000\000\000\021\000\
\020\000\000\000\020\000\000\000\000\000\021\000\000\000\000\000\
\000\000\000\000\021\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\058\000\000\000\059\000\000\000\060\000\021\000\
\000\000\021\000\021\000\106\000\061\000\000\000\000\000\021\000\
\000\000\021\000\000\000\000\000\000\000\062\000\063\000\000\000\
\064\000\000\000\065\000\066\000\067\000\000\000\000\000\000\000\
\000\000\068\000\069\000\070\000\071\000\058\000\000\000\059\000\
\079\000\060\000\000\000\000\000\000\000\000\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\063\000\000\000\064\000\000\000\065\000\066\000\067\000\
\000\000\000\000\000\000\000\000\068\000\069\000\070\000\071\000\
\058\000\112\000\059\000\000\000\060\000\000\000\000\000\000\000\
\000\000\000\000\061\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\062\000\063\000\000\000\064\000\000\000\
\065\000\066\000\067\000\000\000\000\000\000\000\000\000\068\000\
\069\000\070\000\071\000\058\000\000\000\059\000\000\000\060\000\
\000\000\000\000\000\000\000\000\000\000\061\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\063\000\
\000\000\064\000\000\000\065\000\066\000\067\000\000\000\000\000\
\000\000\000\000\068\000\069\000\070\000\071\000\058\000\000\000\
\059\000\000\000\060\000\000\000\000\000\000\000\000\000\000\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\062\000\063\000\000\000\064\000\000\000\000\000\066\000\
\067\000\000\000\000\000\000\000\000\000\068\000\069\000\070\000\
\071\000"

let yycheck = "\009\000\
\000\000\000\000\041\000\013\000\001\000\017\001\029\001\000\000\
\021\000\000\000\023\000\003\001\013\001\013\001\024\000\011\001\
\011\001\018\001\018\001\032\000\030\000\004\001\035\000\036\000\
\037\000\038\000\039\000\030\001\020\001\021\001\028\001\022\001\
\016\001\072\000\026\001\027\001\037\001\037\001\000\000\013\001\
\032\001\033\001\034\001\035\001\018\001\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\015\001\030\001\074\000\075\000\037\001\
\002\001\078\000\079\000\006\001\007\001\008\001\009\001\028\001\
\022\001\012\001\013\001\014\001\000\000\016\001\017\001\018\001\
\019\001\020\001\021\001\003\001\000\000\024\001\001\001\022\001\
\003\001\011\001\005\001\030\001\011\001\106\000\030\001\028\001\
\011\001\110\000\032\001\033\001\034\001\035\001\112\000\116\000\
\114\000\020\001\021\001\028\001\023\001\016\001\025\001\026\001\
\027\001\030\001\000\000\006\000\034\000\032\001\033\001\034\001\
\035\001\017\000\001\001\038\001\003\001\024\000\005\001\079\000\
\006\001\007\001\008\001\009\001\011\001\076\000\072\000\013\001\
\255\255\255\255\016\001\255\255\018\001\020\001\021\001\255\255\
\023\001\255\255\025\001\026\001\027\001\255\255\255\255\255\255\
\000\000\032\001\033\001\034\001\035\001\036\001\255\255\255\255\
\001\001\255\255\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\255\255\023\001\255\255\
\025\001\026\001\027\001\255\255\255\255\030\001\000\000\032\001\
\033\001\034\001\035\001\255\255\255\255\255\255\255\255\001\001\
\255\255\003\001\255\255\005\001\255\255\255\255\255\255\255\255\
\255\255\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\020\001\021\001\255\255\023\001\255\255\025\001\
\026\001\027\001\255\255\255\255\000\000\031\001\032\001\033\001\
\034\001\035\001\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\011\001\000\000\255\255\255\255\015\001\
\015\001\017\001\017\001\255\255\020\001\021\001\015\001\023\001\
\017\001\025\001\026\001\027\001\028\001\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\255\255\038\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\010\001\011\001\000\000\255\255\255\255\015\001\255\255\017\001\
\255\255\255\255\020\001\021\001\255\255\023\001\255\255\025\001\
\026\001\027\001\028\001\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\255\255\038\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\010\001\011\001\
\000\000\255\255\255\255\015\001\255\255\017\001\255\255\255\255\
\020\001\021\001\255\255\023\001\000\000\025\001\026\001\027\001\
\028\001\255\255\030\001\031\001\255\255\255\255\255\255\255\255\
\036\001\255\255\038\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\010\001\011\001\255\255\255\255\
\255\255\015\001\000\000\017\001\255\255\255\255\020\001\021\001\
\255\255\023\001\255\255\025\001\026\001\027\001\028\001\255\255\
\030\001\031\001\255\255\000\000\255\255\255\255\036\001\255\255\
\038\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\011\001\255\255\255\255\255\255\015\001\
\255\255\017\001\255\255\255\255\020\001\021\001\255\255\023\001\
\255\255\025\001\026\001\027\001\028\001\255\255\030\001\031\001\
\000\000\255\255\255\255\255\255\036\001\255\255\038\001\001\001\
\002\001\003\001\004\001\005\001\000\000\255\255\255\255\255\255\
\010\001\011\001\255\255\255\255\255\255\015\001\255\255\017\001\
\255\255\255\255\020\001\021\001\255\255\023\001\255\255\025\001\
\026\001\027\001\028\001\255\255\030\001\031\001\255\255\255\255\
\255\255\255\255\036\001\000\000\038\001\001\001\002\001\255\255\
\004\001\005\001\255\255\255\255\255\255\255\255\010\001\011\001\
\255\255\255\255\255\255\015\001\255\255\017\001\255\255\255\255\
\255\255\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\028\001\255\255\030\001\031\001\255\255\255\255\255\255\255\255\
\036\001\255\255\038\001\255\255\255\255\001\001\002\001\255\255\
\004\001\005\001\255\255\255\255\255\255\255\255\010\001\011\001\
\255\255\255\255\255\255\015\001\255\255\017\001\255\255\255\255\
\255\255\255\255\255\255\023\001\255\255\025\001\255\255\003\001\
\028\001\005\001\030\001\031\001\255\255\255\255\255\255\011\001\
\036\001\255\255\038\001\001\001\002\001\255\255\004\001\005\001\
\020\001\021\001\255\255\023\001\010\001\011\001\026\001\027\001\
\255\255\015\001\255\255\017\001\032\001\033\001\034\001\035\001\
\255\255\023\001\255\255\025\001\255\255\255\255\028\001\255\255\
\030\001\031\001\255\255\255\255\255\255\255\255\036\001\255\255\
\038\001\001\001\002\001\255\255\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\011\001\255\255\001\001\002\001\015\001\
\004\001\017\001\255\255\255\255\255\255\255\255\010\001\023\001\
\255\255\025\001\255\255\015\001\028\001\017\001\030\001\031\001\
\255\255\255\255\255\255\255\255\036\001\025\001\038\001\255\255\
\028\001\255\255\030\001\031\001\002\001\255\255\004\001\255\255\
\036\001\255\255\038\001\255\255\010\001\255\255\255\255\255\255\
\255\255\015\001\255\255\017\001\255\255\002\001\255\255\004\001\
\255\255\255\255\255\255\025\001\255\255\010\001\028\001\255\255\
\030\001\031\001\015\001\255\255\017\001\255\255\036\001\255\255\
\038\001\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\255\255\030\001\031\001\255\255\255\255\255\255\255\255\036\001\
\255\255\038\001\002\001\255\255\004\001\255\255\255\255\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\002\001\015\001\
\004\001\017\001\255\255\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\255\255\015\001\028\001\017\001\030\001\031\001\
\255\255\255\255\255\255\255\255\036\001\255\255\038\001\255\255\
\028\001\255\255\030\001\031\001\255\255\002\001\255\255\004\001\
\036\001\255\255\038\001\255\255\255\255\010\001\255\255\255\255\
\255\255\255\255\015\001\255\255\017\001\255\255\255\255\255\255\
\255\255\255\255\001\001\255\255\003\001\255\255\005\001\028\001\
\255\255\030\001\031\001\010\001\011\001\255\255\255\255\036\001\
\255\255\038\001\255\255\255\255\255\255\020\001\021\001\255\255\
\023\001\255\255\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\001\001\255\255\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\255\255\023\001\255\255\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\001\001\002\001\003\001\255\255\005\001\255\255\255\255\255\255\
\255\255\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\021\001\255\255\023\001\255\255\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\032\001\
\033\001\034\001\035\001\001\001\255\255\003\001\255\255\005\001\
\255\255\255\255\255\255\255\255\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\255\255\023\001\255\255\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\032\001\033\001\034\001\035\001\001\001\255\255\
\003\001\255\255\005\001\255\255\255\255\255\255\255\255\255\255\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\255\255\023\001\255\255\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\032\001\033\001\034\001\
\035\001"

let yynames_const = "\
  AND\000\
  BAR\000\
  COLONCOLON\000\
  COMMA\000\
  ELSE\000\
  EOF\000\
  EQUAL\000\
  FUNCTION\000\
  IF\000\
  IN\000\
  LBRACKET\000\
  LET\000\
  LPAREN\000\
  MATCH\000\
  MINUS\000\
  MINUS_DOT\000\
  MINUS_GT\000\
  NEQ\000\
  NOT\000\
  OR\000\
  PLUS\000\
  PLUS_DOT\000\
  RBRACKET\000\
  REC\000\
  RPAREN\000\
  SEMI\000\
  SLASH\000\
  SLASH_DOT\000\
  STAR\000\
  STAR_DOT\000\
  THEN\000\
  UNDERSCORE\000\
  WITH\000\
  "

let yynames_block = "\
  COMP\000\
  CONST_BOOL\000\
  CONST_INT\000\
  CONST_FLOAT\000\
  CONST_STRING\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'defs) in
    Obj.repr(
# 72 "parser.mly"
               ( _1 )
# 472 "parser.ml"
               : Ast.plets))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
                    ( [] )
# 478 "parser.ml"
               : 'defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'defs) in
    Obj.repr(
# 77 "parser.mly"
              ( _1 :: _2 )
# 486 "parser.ml"
               : 'defs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'binding) in
    Obj.repr(
# 82 "parser.mly"
    ( let is_rec, patt, body = _2 in
      mk_def (is_rec, patt, body) )
# 494 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'rec_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
    ( (_1, _2, _4) )
# 503 "parser.ml"
               : 'binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'rec_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
    ( let body = 
         List.fold_right (fun patt e -> mk_expr (PE_fun(patt, e))) _3 _5
      in
      (_1, mk_patt (PP_ident _2), body) )
# 516 "parser.ml"
               : 'binding))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
    ( mk_patt PP_any )
# 522 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 100 "parser.mly"
    ( mk_patt (PP_ident _1) )
# 529 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_comma_list) in
    Obj.repr(
# 102 "parser.mly"
    ( mk_patt (PP_tuple _2) )
# 536 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
    ( _2 )
# 543 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 109 "parser.mly"
    ( _1 )
# 550 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "parser.mly"
    ( mk_expr (PE_ident _1) )
# 557 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_comma_list) in
    Obj.repr(
# 113 "parser.mly"
    ( mk_expr (PE_tuple _2) )
# 564 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_semi_list) in
    Obj.repr(
# 115 "parser.mly"
    ( List.fold_right 
	(fun e acc -> mk_expr (PE_cons (e, acc))) _2 (mk_expr PE_nil) )
# 572 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 121 "parser.mly"
    ( _1 )
# 579 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr_list) in
    Obj.repr(
# 123 "parser.mly"
    ( List.fold_left (fun acc e -> mk_expr (PE_app (acc, e))) _1 _2 )
# 587 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
    ( mk_expr (PE_cons (_1, _3)) )
# 595 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'binding) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
    ( let is_rec, patt, body = _2 in
      mk_expr (PE_let (is_rec, patt, body, _4)) )
# 604 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
    ( mk_expr (PE_fun (_2, _4)) )
# 612 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
    ( mk_expr (PE_if (_2, _4, _6)) )
# 621 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 12 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 10 : 'opt_bar) in
    let _8 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _12 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _14 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
    ( mk_expr (PE_match (_2, _8, (_10, _12, _14))) )
# 633 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
    ( mk_expr (PE_binop (Badd, _1, _3)) )
# 641 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
    ( mk_expr (PE_binop (Badd_f, _1, _3)) )
# 649 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
    ( mk_expr (PE_binop (Bsub, _1, _3)) )
# 657 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
    ( mk_expr (PE_binop (Bsub_f, _1, _3)) )
# 665 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
    ( mk_expr (PE_binop (Bmul, _1, _3)) )
# 673 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
    ( mk_expr (PE_binop (Bmul_f, _1, _3)) )
# 681 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
    ( mk_expr (PE_binop (Bdiv, _1, _3)) )
# 689 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
    ( mk_expr (PE_binop (Bdiv_f, _1, _3)) )
# 697 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.binop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
    ( mk_expr (PE_binop (_2, _1, _3)) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
    ( mk_expr (PE_binop (Beq, _1, _3)) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
    ( mk_expr (PE_binop (Bneq, _1, _3)) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
    ( mk_expr (PE_binop (Band, _1, _3)) )
# 730 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
    ( mk_expr (PE_binop (Bor, _1, _3)) )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
    ( mk_expr (PE_unop (Uminus, _2)) )
# 745 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
    ( mk_expr (PE_unop (Uminus_f, _2)) )
# 752 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
    ( mk_expr (PE_unop (Unot, _2)) )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 173 "parser.mly"
    ( mk_expr (PE_cte Cunit) )
# 765 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 175 "parser.mly"
    ( mk_expr (PE_cte (Cbool _1)) )
# 772 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 177 "parser.mly"
    ( mk_expr (PE_cte (Cint _1)) )
# 779 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 179 "parser.mly"
    ( mk_expr (PE_cte (Cfloat _1)) )
# 786 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 181 "parser.mly"
    ( mk_expr (PE_cte (Cstring _1)) )
# 793 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 185 "parser.mly"
               ( false )
# 799 "parser.ml"
               : 'rec_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "parser.mly"
               ( true )
# 805 "parser.ml"
               : 'rec_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "parser.mly"
               ( () )
# 811 "parser.ml"
               : 'opt_bar))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "parser.mly"
               ( () )
# 817 "parser.ml"
               : 'opt_bar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr_list) in
    Obj.repr(
# 195 "parser.mly"
                                            ( _1 :: _2 )
# 825 "parser.ml"
               : 'simple_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 196 "parser.mly"
                                            ( [_1] )
# 832 "parser.ml"
               : 'simple_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_comma_list) in
    Obj.repr(
# 201 "parser.mly"
    ( _1 :: _3 )
# 840 "parser.ml"
               : 'expr_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 203 "parser.mly"
    ( [_1; _3] )
# 848 "parser.ml"
               : 'expr_comma_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 208 "parser.mly"
    ( [] )
# 854 "parser.ml"
               : 'expr_semi_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 210 "parser.mly"
    ( [_1] )
# 861 "parser.ml"
               : 'expr_semi_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_semi_list) in
    Obj.repr(
# 212 "parser.mly"
    ( _1 :: _3 )
# 869 "parser.ml"
               : 'expr_semi_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_comma_list) in
    Obj.repr(
# 217 "parser.mly"
    ( _1 :: _3 )
# 877 "parser.ml"
               : 'pattern_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 219 "parser.mly"
    ( [_1; _3] )
# 885 "parser.ml"
               : 'pattern_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_list) in
    Obj.repr(
# 223 "parser.mly"
                                  ( _1 :: _2 )
# 893 "parser.ml"
               : 'pattern_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 224 "parser.mly"
                                  ( [_1] )
# 900 "parser.ml"
               : 'pattern_list))
(* Entry lets *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let lets (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.plets)
