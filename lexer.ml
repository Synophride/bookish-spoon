# 1 "lexer.mll"
 
  open Lexing
  open Parser
  open Ast

  exception Lexical_error of string

  let id_or_keyword =
    let h = Hashtbl.create 17 in
    List.iter (fun (s,k) -> Hashtbl.add h s k)
      [ 
	"else", ELSE;
	"false", CONST_BOOL(false); 
	"function", FUNCTION;
	"if", IF;
	"in", IN;
	"let", LET;
	"match", MATCH;
	"not", NOT;
	"rec", REC;
	"then", THEN;
	"true", CONST_BOOL(true);
	"with", WITH;
      ];
    fun s -> 
      try Hashtbl.find h s with Not_found -> IDENT s

  let newline lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <- 
      { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum }

  let comment_cpt = ref 0

# 37 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\221\255\222\255\223\255\224\255\225\255\005\000\227\255\
    \228\255\229\255\001\000\003\000\005\000\000\000\021\000\022\000\
    \023\000\247\255\001\000\025\000\084\000\192\000\028\000\003\000\
    \255\255\253\255\164\000\011\001\033\001\043\001\053\001\065\001\
    \075\001\232\255\231\255\242\255\241\255\240\255\239\255\237\255\
    \234\255\235\255\233\255\226\255\101\001\249\255\123\001\038\000\
    \255\255\252\255\253\255\254\255\136\000\251\255\252\255\253\255\
    \042\000\042\000\255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\033\000\255\255\
    \255\255\255\255\033\000\019\000\017\000\012\000\011\000\010\000\
    \009\000\255\255\007\000\005\000\004\000\003\000\025\000\001\000\
    \255\255\255\255\255\255\006\000\255\255\006\000\255\255\006\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\004\000\005\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\003\000\255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\046\000\000\000\046\000\255\255\
    \000\000\000\000\000\000\000\000\054\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\024\000\000\000\023\000\023\000\000\000\000\000\
    \023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\000\000\003\000\023\000\000\000\000\000\010\000\042\000\
    \022\000\009\000\014\000\015\000\004\000\016\000\038\000\013\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\006\000\017\000\011\000\005\000\012\000\043\000\
    \041\000\040\000\039\000\037\000\036\000\035\000\025\000\027\000\
    \049\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\059\000\058\000\034\000\000\000\000\000\
    \000\000\000\000\000\000\008\000\000\000\007\000\026\000\021\000\
    \000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\018\000\033\000\026\000\000\000\
    \000\000\000\000\050\000\000\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\000\000\000\000\
    \000\000\000\000\055\000\000\000\051\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\000\000\
    \057\000\000\000\056\000\020\000\000\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\032\000\
    \000\000\032\000\000\000\000\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\000\000\000\000\000\000\000\000\020\000\
    \000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\030\000\000\000\030\000\000\000\
    \028\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\045\000\
    \028\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\255\255\000\000\048\000\
    \053\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\045\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\023\000\000\000\255\255\255\255\
    \023\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\023\000\255\255\255\255\000\000\010\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \011\000\011\000\012\000\014\000\015\000\016\000\022\000\019\000\
    \047\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\056\000\057\000\016\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\019\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\020\000\000\000\018\000\019\000\255\255\
    \255\255\255\255\047\000\255\255\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\255\255\255\255\
    \255\255\255\255\052\000\255\255\047\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\255\255\
    \052\000\255\255\052\000\020\000\255\255\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\026\000\
    \255\255\026\000\255\255\255\255\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\255\255\255\255\255\255\255\255\021\000\
    \255\255\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\028\000\255\255\028\000\255\255\
    \027\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\044\000\
    \027\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\046\000\255\255\044\000\
    \052\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\046\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\044\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\044\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\046\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 45 "lexer.mll"
 ( newline lexbuf; token lexbuf )
# 249 "lexer.ml"

  | 1 ->
# 47 "lexer.mll"
 ( token lexbuf )
# 254 "lexer.ml"

  | 2 ->
# 49 "lexer.mll"
 ( incr comment_cpt; comment lexbuf; token lexbuf )
# 259 "lexer.ml"

  | 3 ->
# 51 "lexer.mll"
 ( UNDERSCORE )
# 264 "lexer.ml"

  | 4 ->
# 53 "lexer.mll"
 ( id_or_keyword (lexeme lexbuf) )
# 269 "lexer.ml"

  | 5 ->
# 55 "lexer.mll"
 ( CONST_INT (int_of_string (lexeme lexbuf)) )
# 274 "lexer.ml"

  | 6 ->
# 57 "lexer.mll"
 ( CONST_FLOAT (float_of_string (lexeme lexbuf)) )
# 279 "lexer.ml"

  | 7 ->
# 59 "lexer.mll"
 ( BAR )
# 284 "lexer.ml"

  | 8 ->
# 61 "lexer.mll"
 ( SEMI )
# 289 "lexer.ml"

  | 9 ->
# 63 "lexer.mll"
 ( MINUS )
# 294 "lexer.ml"

  | 10 ->
# 65 "lexer.mll"
 ( PLUS )
# 299 "lexer.ml"

  | 11 ->
# 67 "lexer.mll"
 ( STAR )
# 304 "lexer.ml"

  | 12 ->
# 69 "lexer.mll"
 ( SLASH )
# 309 "lexer.ml"

  | 13 ->
# 71 "lexer.mll"
 ( MINUS_DOT )
# 314 "lexer.ml"

  | 14 ->
# 73 "lexer.mll"
 ( PLUS_DOT )
# 319 "lexer.ml"

  | 15 ->
# 75 "lexer.mll"
 ( STAR_DOT )
# 324 "lexer.ml"

  | 16 ->
# 77 "lexer.mll"
 ( SLASH_DOT )
# 329 "lexer.ml"

  | 17 ->
# 79 "lexer.mll"
 ( COMP Bgt )
# 334 "lexer.ml"

  | 18 ->
# 81 "lexer.mll"
 ( COMP Bge )
# 339 "lexer.ml"

  | 19 ->
# 83 "lexer.mll"
 ( COMP Blt )
# 344 "lexer.ml"

  | 20 ->
# 85 "lexer.mll"
 ( COMP Ble )
# 349 "lexer.ml"

  | 21 ->
# 87 "lexer.mll"
 ( NEQ )
# 354 "lexer.ml"

  | 22 ->
# 89 "lexer.mll"
 ( AND )
# 359 "lexer.ml"

  | 23 ->
# 91 "lexer.mll"
 ( OR )
# 364 "lexer.ml"

  | 24 ->
# 93 "lexer.mll"
 ( MINUS_GT )
# 369 "lexer.ml"

  | 25 ->
# 95 "lexer.mll"
 ( LPAREN )
# 374 "lexer.ml"

  | 26 ->
# 97 "lexer.mll"
 ( RPAREN )
# 379 "lexer.ml"

  | 27 ->
# 99 "lexer.mll"
 ( LBRACKET )
# 384 "lexer.ml"

  | 28 ->
# 101 "lexer.mll"
 ( RBRACKET )
# 389 "lexer.ml"

  | 29 ->
# 103 "lexer.mll"
 ( COLONCOLON )
# 394 "lexer.ml"

  | 30 ->
# 105 "lexer.mll"
 ( EQUAL )
# 399 "lexer.ml"

  | 31 ->
# 107 "lexer.mll"
 ( COMMA )
# 404 "lexer.ml"

  | 32 ->
# 109 "lexer.mll"
 ( let buf = Buffer.create 512 in
	  string buf lexbuf;
	  CONST_STRING (Buffer.contents buf) )
# 411 "lexer.ml"

  | 33 ->
# 113 "lexer.mll"
 ( raise (Lexical_error (lexeme lexbuf)) )
# 416 "lexer.ml"

  | 34 ->
# 115 "lexer.mll"
 ( EOF )
# 421 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and string buf lexbuf =
    __ocaml_lex_string_rec buf lexbuf 44
and __ocaml_lex_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 118 "lexer.mll"
          ( () )
# 433 "lexer.ml"

  | 1 ->
# 120 "lexer.mll"
 ( Buffer.add_string buf "\\n";
	  string buf lexbuf )
# 439 "lexer.ml"

  | 2 ->
# 123 "lexer.mll"
 ( Buffer.add_string buf "\\\\";
	  string buf lexbuf )
# 445 "lexer.ml"

  | 3 ->
# 126 "lexer.mll"
 ( Buffer.add_string buf "\\\"";
	  string buf lexbuf )
# 451 "lexer.ml"

  | 4 ->
# 129 "lexer.mll"
 ( Buffer.add_string buf (lexeme lexbuf);
	  string buf lexbuf )
# 457 "lexer.ml"

  | 5 ->
# 132 "lexer.mll"
 ( raise (Lexical_error "illegal escape character") )
# 462 "lexer.ml"

  | 6 ->
# 134 "lexer.mll"
 ( raise (Lexical_error "unterminated string") )
# 467 "lexer.ml"

  | 7 ->
# 136 "lexer.mll"
 ( raise (Lexical_error ("illegal character: " ^ lexeme lexbuf)) )
# 472 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_string_rec buf lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 52
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 139 "lexer.mll"
           ( incr comment_cpt; comment lexbuf )
# 484 "lexer.ml"

  | 1 ->
# 140 "lexer.mll"
           ( decr comment_cpt; if !comment_cpt > 0 then comment lexbuf )
# 489 "lexer.ml"

  | 2 ->
# 141 "lexer.mll"
           ( newline lexbuf; comment lexbuf )
# 494 "lexer.ml"

  | 3 ->
# 142 "lexer.mll"
           ( comment lexbuf )
# 499 "lexer.ml"

  | 4 ->
# 143 "lexer.mll"
           ( raise (Lexical_error "unterminated comment") )
# 504 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

